
g ++ SourceFile1.cpp SourceFile2.cpp

使用这种方法的问题是编译器事先要编译每个文件而不管文件是否需要重建。
在具有多个文件的工程中，如果仅仅改变了一个文件，就可能不得不重新编译所有文件。
解决问题的方法是用一个称为make的程序。
该程序是在UNIX上开发的，但某些形式到处都可使用。
make工具按照一个名为makefile的文本文件中的指令去管理一个工程中的所有单个文件。
当编辑了工程中的某些文件并使用make时，make程序会按照makefile中的说明去比较源代码文件与相应目标文件的日期，
如果源代码文件的日期比它的目标文件的日期新，make会调用编译器对源代码进行编译。
make仅仅编译已经改变了的源代码，以及其他受修改文件影响的源代码文件。
使用make程序，每次修改程序时，不必重新编译工程中的所有文件，也不必核对所有生成的东西。
makefile文件包含了组合工程的所有命令。
学会使用make命令会节省大量时间，

1/在makefile中的所有注释都从“#”开始一直延续到本行的末尾
# A comment
hello.exe: hello.cpp
        mycompiler hello.cpp
这就是说hello.exe（目标文件）依赖于hello.cpp。当hello.cpp比hello.exe文件日期新时，make执行“规则”mycompiler hello.cpp。
可能会有多重依赖和多重规则。许多make程序要求所有规则以tab开头。这与空格通常被忽略的空格不一样，空格可以用于格式化以便于阅读。

2/宏
CPP = mycompiler
hello.exe: hello.cpp
        $(CPP) hello.cpp
		
等号‘=’用来把CPP定义为一个宏，符号‘$’和圆括号扩展宏。
在这里，扩展意味着宏调用$（CPP）将被字符串mycompiler取代。
对于上面的宏，如果想改变到名为cpp的不同编译器，只需把宏改变为：

3/后缀规则
CPP = mycompiler
.SUFFIXES: .exe .cpp
.cpp.exe:
        $(CPP) $<
SUFFIXES指令告诉make必须注意后面的扩展名，因为它们对于这个特定的makefile
有特殊的意义。其后看到后缀规则.cpp.exe，
说明“这里是怎样把任何扩展名为cpp的文件转化为一个扩展名为exe的文件的”（当cpp文件比exe文件新的时候）。
和前面一样使用了宏$（CPP），但是发现了某种新东西：$＜。因为以‘$’开头，所以这是一个宏，
但它是make内部的特殊的宏。符号$＜只能用于后缀规则，意思是“无论怎样都要触发的规则”（有时称为依赖），在本例中表示“需要被编译的cpp文件。”

