
注意：C++的dll不具有2进制级别的共享性，也就是说VC的MinGW的C++ dll不能混用。而C的dll却可以。




一、Dynamic Link Library
DLL 是 Dynamic Link Library 的缩写，译为“动态链接库”。DLL也是一个被编译过的二进制程序，可以被其他程序调用，
但与 exe 不同，DLL不能独立运行，必须由其他程序调用载入内存。

DLL 中封装了很多函数，只要知道函数的入口地址，就可以被其他程序调用。

Windows API中所有的函数都包含在DLL中，其中有3个最重要的DLL：
Kemel32.dll：它包含那些用于管理内存、进程和线程的函数，例如CreateThread函数；
User32.dll：它包含那些用于执行用户界面任务（如窗口的创建和消息的传送）的函数，例如 CreateWindow 函数；
GDI32.dll：它包含那些用于画图和显示文本的函数。





二、静态链接库和动态链接库
1) 静态库
函数和数据被编译进一个二进制文件（通常扩展名为.LIB）。在使用静态库的情况下， 在编译链接可执行文件时，
链接器从库中复制这些函数和数据并把它们和应用程序的其他模块组合起来创建最终的可执行文件（.EXE文件）。
当发布产品时，只需要发布这个可执行文件，并不需要发布被使用的静态库。

2) 动态库
在使用动态库的时候，往往提供两个文件：一个引入库(.lib)文件和一个DLL (.dll) 文件。虽然引入库的后缀名也是“lib”，
但是，动态库的引入库文件和静态库文件有着本质上的区别，
对一个DLL来说，其引入库文件(.lib)包含该DLL导出的函数和变量的符号名，而.dll文件包含该DLL实际的函数和数据。
在使用动态库的情况下，在编译链接可执行文件时，只需要链接该DLL的引入库文件，
该DLL中的函数代码和数据并不复制到可执行文件中，直到可执行程序运行时，才去加载所需的DLL，将该DLL映射到进程的地址空间中，然后访问DLL中导出的函数。
这时，在发布产品时，除了发布可执行文件以外，同时还要发布该程序将要调用的动态链接库。

三、静态链接库在链接时，编译器会将 .obj 文件和 .LIB 文件组织成一个 .exe 文件，程序运行时，将全部数据加载到内存。
如果程序体积较大，功能较为复杂，那么加载到内存中的时间就会比较长，最直接的一个例子就是双击打开一个软件，要很久才能看到界面。这是静态链接库的一个弊端。

动态链接库有两种加载方式：隐式加载和显示加载。
隐式加载又叫载入时加载：指在主程序载入内存时搜索DLL，并将DLL载入内存。隐式加载也会有静态链接库的问题，如果程序稍大，加载时间就会过长，用户不能接受。
显式加载又叫运行时加载：指主程序在运行过程中需要DLL中的函数时再加载。显式加载是将较大的程序分开加载的，程序运行时只需要将主程序载入内存，软件打开速度快，用户体验好。


四、使用动态链接库的好处
1) 可以采用多种编程语言来编写
我们可以采用自己熟悉的开发语言编写DLL，然后由其他语言编写的可执行程序来调用这些DLL。例如，可以利用VB来编写程序的界面，然后调用利用VC++或Delphi编写的完成程序业务逻辑的DLL。

2) 增强产品的功能
在发布产品时，可以发布产品功能实现的动态链接库规范，让其他公司或个人遵照这个规范开发自己的DLL，以取代产品原有的DLL，让产品调用新的DLL，从而实现功能 的增强。
在实际工作中，我们看到许多产品都提供了界面插件功能，允许用户动态地更换程序的界面，这就可以通过更换界面DLL来实现。

3) 提供二次开发的平台
在销售产品的同时，可以采用DLL的形式提供一个二次开发的平台，让用户可以利用该DLL调用其中实现的功能，编写符合自己业务需要的产品，从而实现二次开发。

4) 简化项目管理
在一个大型项目开发中，通常都是由多个项目小组同时开发，如果采用串行开发，则效率是非常低的。
我们可以将项目细分，将不同功能交由各项目小组以多个DLL的方式实现，这样，各个项目小组就可以同时进行开发了。

5) 可以节省磁盘空间和内存
如果多个应用程序需要访问同样的功能，那么可以将该功能以DLL的形式提供，这样在机器上只需要存在一份该DLL文件就可以了，从而节省了磁盘空间。
另外，如果多个应用程序使用同一个DLL，该DLL只需要放入内存一次，所有的应用程序就都可以共亨它了。这样，内存的使用将更加有效。
我们知道，当进程被加载时，系统会为它分配内存，接着分析该可执行模块，找到该程序将要调用哪些DLL，然后系统搜索这些DLL，找到后就加载它们，
并为它们分配内存空间。DLL的内存空间只有一份，如果有第二个程序也需要加载该DLL，那么它们共享内存空间，相同的DLL不会再次加载。

6) 有助于资源的共享
DLL可以包含对话框模板、字符串、图标和位图等多种资源，多个应用程序可以使用DLL来共享这些资源。在实际工作中，可以编写一个纯资源的动态链接库，供其他应用程序访问。

7) 有助于实现应用程序的本地化
如果产品需要提供多语言版本，那么就可以使用DLL来支持多语言。可以为每种语言创建一个只支持这种语言的动态链接库。